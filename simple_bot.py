import os
import logging
import asyncio
from flask import Flask, request
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from dotenv import load_dotenv
import threading

# Load environment variables
load_dotenv()

# Set up logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# Load environment variables
TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
WEBHOOK_PATH = f'/{TOKEN}'

# Create Flask app
app = Flask(__name__)

# Global variable to store the bot application
bot_application = None

def init_bot():
    """Initialize bot application."""
    global bot_application
    
    if not all([TOKEN, WEBHOOK_URL]):
        logging.error("–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return None
    
    # Build the Application
    bot_application = ApplicationBuilder().token(TOKEN).build()
    
    # Add command handlers
    bot_application.add_handler(CommandHandler("start", start_command))
    
    # Set webhook in background
    def setup_webhook_background():
        async def setup_webhook():
            webhook_full_url = WEBHOOK_URL + WEBHOOK_PATH
            await bot_application.bot.set_webhook(url=webhook_full_url)
            logging.info(f"–í–µ–±—Ö—É–∫ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ URL: {webhook_full_url}")
        
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        loop.run_until_complete(setup_webhook())
        loop.close()
    
    setup_thread = threading.Thread(target=setup_webhook_background)
    setup_thread.daemon = True
    setup_thread.start()
    
    logging.info("Bot application –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    return bot_application

@app.route('/health')
def health_check():
    """Health check endpoint."""
    logging.info("=== –ü–û–õ–£–ß–ï–ù –ó–ê–ü–†–û–° –ù–ê /health ===")
    return 'OK', 200

@app.route('/')
def home():
    """Home page."""
    logging.info("=== –ü–û–õ–£–ß–ï–ù –ó–ê–ü–†–û–° –ù–ê –ì–õ–ê–í–ù–£–Æ –°–¢–†–ê–ù–ò–¶–£ ===")
    return 'Telegram Bot is running!'

@app.route(WEBHOOK_PATH, methods=['POST'])
def telegram_webhook_handler():
    """Handles incoming webhooks from Telegram."""
    try:
        data = request.get_json()
        logging.info(f"–ü–æ–ª—É—á–µ–Ω –≤–µ–±—Ö—É–∫ –æ—Ç Telegram: {data.get('update_id', 'unknown')}")
        
        if not bot_application:
            logging.error("Bot application –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return 'Bot not initialized', 500
        
        update = Update.de_json(data, bot_application.bot)
        
        if not update:
            logging.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ–±—ä–µ–∫—Ç Update –∏–∑ –¥–∞–Ω–Ω—ã—Ö –≤–µ–±—Ö—É–∫–∞")
            return 'Invalid update data', 400
        
        # Process the update
        def process_update():
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            loop.run_until_complete(bot_application.process_update(update))
            loop.close()
        
        thread = threading.Thread(target=process_update)
        thread.start()
        
        logging.info("–í–µ–±—Ö—É–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        return 'OK'
        
    except Exception as e:
        logging.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–µ–±—Ö—É–∫–∞: %s", e, exc_info=True)
        return f'Error: {e}', 500

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handles the /start command."""
    try:
        logging.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}")
        await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø —Ä–∞–±–æ—Ç–∞—é –Ω–∞ Railway! üöÄ")
        logging.info("–û—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /start: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã.")

# Initialize bot when module is imported
init_bot()
logging.info("–ü—Ä–æ—Å—Ç–æ–π –±–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 8000))
    logging.info(f"–ó–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É: {port}")
    logging.info(f"–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è PORT –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {os.environ.get('PORT', '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–ê')}")
    app.run(host='0.0.0.0', port=port, debug=False, threaded=True)