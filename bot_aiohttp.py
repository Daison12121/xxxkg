#!/usr/bin/env python3
import os
import sys
import logging
import asyncio
from flask import Flask, request
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(
    format='%(asctime)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# --- Flask ---
app = Flask(__name__)

# --- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
PORT = int(os.environ.get("PORT", 8080))
TOKEN = os.environ.get("BOT_TOKEN")  # Railway Variables
WEBHOOK_URL = f"https://{os.environ.get('RAILWAY_STATIC_URL', 'xxxkg-production.up.railway.app')}/{TOKEN}"

# --- Telegram bot ---
application = Application.builder().token(TOKEN).build()

# --- –•—ç–Ω–¥–ª–µ—Ä—ã ---
async def start(update: Update, context):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ Railway üöÄ")

async def echo_text(update: Update, context):
    await update.message.reply_text(f"–¢—ã –Ω–∞–ø–∏—Å–∞–ª: {update.message.text}")

async def handle_photo(update: Update, context):
    await update.message.reply_text("–§–æ—Ç–æ –ø–æ–ª—É—á–∏–ª! üì∏")

application.add_handler(CommandHandler("start", start))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo_text))
application.add_handler(MessageHandler(filters.PHOTO, handle_photo))

# --- Flask –º–∞—Ä—à—Ä—É—Ç—ã ---
@app.route("/")
def home():
    logging.info("=== –ü–û–õ–£–ß–ï–ù –ó–ê–ü–†–û–° –ù–ê –ì–õ–ê–í–ù–£–Æ –°–¢–†–ê–ù–ò–¶–£ ===")
    return f"""
    <h1>üéâ FLASK –°–ï–†–í–ï–† –†–ê–ë–û–¢–ê–ï–¢!</h1>
    <p>Port: {PORT}</p>
    <p>Python: {sys.version}</p>
    """

@app.route("/health")
def health():
    return "OK", 200

@app.route(f"/{TOKEN}", methods=["POST"])
def webhook():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–ø–¥–µ–π—Ç–æ–≤ –æ—Ç Telegram"""
    update = Update.de_json(request.get_json(force=True), application.bot)
    application.update_queue.put_nowait(update)
    return "OK", 200

# --- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ ---
try:
    logging.info("=== –£–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –í–ï–ë–•–£–ö ===")
    asyncio.get_event_loop().run_until_complete(
        application.bot.set_webhook(url=WEBHOOK_URL)
    )
except Exception as e:
    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤–µ–±—Ö—É–∫–∞: {e}")

# Gunicorn –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å app
logging.info("=== Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏ –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ ===")
