#!/usr/bin/env python3
import os
import sys
import logging
import asyncio
from flask import Flask, request
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters

logging.basicConfig(
    format='%(asctime)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

app = Flask(__name__)

PORT = int(os.environ.get("PORT", 8000))
TOKEN = os.environ.get("BOT_TOKEN")
if not TOKEN:
    logging.error("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    sys.exit(1)

WEBHOOK_URL = f"https://{os.environ.get('RAILWAY_STATIC_URL', 'xxxkg-production.up.railway.app')}/webhook"

application = Application.builder().token(TOKEN).build()

async def start(update: Update, context):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç üöÄ")

async def echo_text(update: Update, context):
    await update.message.reply_text(f"–¢—ã –Ω–∞–ø–∏—Å–∞–ª: {update.message.text}")

async def handle_photo(update: Update, context):
    await update.message.reply_text("–§–æ—Ç–æ –ø–æ–ª—É—á–∏–ª! üì∏")

application.add_handler(CommandHandler("start", start))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo_text))
application.add_handler(MessageHandler(filters.PHOTO, handle_photo))

@app.route("/")
def home():
    logging.info("=== –ü–û–õ–£–ß–ï–ù –ó–ê–ü–†–û–° –ù–ê –ì–õ–ê–í–ù–£–Æ –°–¢–†–ê–ù–ò–¶–£ ===")
    return f"""
    <h1>üéâ FLASK –°–ï–†–í–ï–† –†–ê–ë–û–¢–ê–ï–¢!</h1>
    <p><strong>Port:</strong> {PORT}</p>
    <p><strong>Token:</strong> {TOKEN[:10]}...</p>
    <p><strong>Webhook URL:</strong> {WEBHOOK_URL}</p>
    <p><strong>Python:</strong> {sys.version}</p>
    <hr>
    <p><a href="/set_webhook">üîó –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–µ–±—Ö—É–∫</a></p>
    <p><a href="/health">‚ù§Ô∏è Health Check</a></p>
    """, 200

@app.route("/health")
def health():
    return "OK", 200

@app.route("/webhook", methods=["POST"])
def webhook():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–ø–¥–µ–π—Ç–æ–≤ –æ—Ç Telegram"""
    try:
        update = Update.de_json(request.get_json(force=True), application.bot)
        application.update_queue.put_nowait(update)
        logging.info("‚úÖ –ü–æ–ª—É—á–µ–Ω –∞–ø–¥–µ–π—Ç –æ—Ç Telegram")
        return "OK", 200
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–∞: {e}")
        return "ERROR", 500

@app.route("/set_webhook")
def set_webhook_route():
    """–ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞"""
    try:
        import requests
        url = f"https://api.telegram.org/bot{TOKEN}/setWebhook"
        data = {"url": WEBHOOK_URL}
        response = requests.post(url, data=data)
        
        if response.status_code == 200:
            logging.info(f"‚úÖ –í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")
            return f"‚úÖ –í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}", 200
        else:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞: {response.text}")
            return f"‚ùå –û—à–∏–±–∫–∞: {response.text}", 500
    except Exception as e:
        logging.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤–µ–±—Ö—É–∫–∞: {e}")
        return f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}", 500

logging.info("=== Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏ –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ ===")
